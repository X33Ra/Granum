To put your local repository on GitHub, follow these step-by-step instructions:

Create a GitHub Repository:

> Go to GitHub (https://github.com) and sign in to your account.
  Click on the "+" button in the top-right corner and select "New repository".
  Provide a name for your repository, choose whether it should be public or private, and add an optional description.
  Click on "Create repository" to create the repository on GitHub.
  Initialize Git in Your Local Repository:

>  Open a terminal or command prompt and navigate to your local repository's directory.
  Run the command git init to initialize Git in your repository.
  Use git add . to stage all the files in your repository for commit. Alternatively, you can use git add <file> to stage specific files.
  Run git commit -m "Initial commit" to commit the staged changes. Replace "Initial commit" with an appropriate commit message.
  Connect Your Local Repository to the GitHub Repository:

>  On the GitHub repository page, copy the URL of the repository (e.g., https://github.com/your-username/your-repository.git).
  In your terminal or command prompt, run the command git remote add origin <repository-url>, replacing <repository-url> with the URL you copied.
  Verify that the remote connection was added successfully by running git remote -v. You should see the remote URL listed.
  Push Your Local Repository to GitHub:

Run the command git push -u origin master to push your local repository's commits to the GitHub repository. If you created a branch other than "master", replace        "master"   with the appropriate branch name.
  Git will prompt you to enter your GitHub username and password. Enter them to authenticate and push your repository.
  Verify the Repository on GitHub:

> Refresh the GitHub repository page, and you should see your local files and commit history reflected in the remote repository.
  That's it! Your local repository is now on GitHub. Subsequent commits can be pushed using the git push command. Make sure to commit and push your changes regularly to keep   your GitHub repository up to date.